import json
import time
import itertools

def add_lis(a, b): # b.append(a)
    for itm in a:
        b.append(itm)
def clr_lis(lis):
    while(len(lis)): lis.pop(-1)
def generate_permutations(n, num_ones):
    base_list = [1] * num_ones + [0] * (n - num_ones)
    permutations = set(itertools.permutations(base_list))
    return list(permutations)



# pre_process_global
roads = []
cus_loc = []
res_loc = []
# perms
ones_zeros_perms = [[], [[1]], [[1, 0], [0, 1], [1, 1]], [[1, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 1], [1, 1, 0], [0, 1, 1], [1, 1, 1]], [[0, 0, 0, 1], [0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 1], [1, 1, 0, 0], [0, 1, 1, 0], [1, 0, 1, 0], [1, 0, 0, 1], [0, 0, 1, 1], [1, 1, 0, 1], [1, 1, 1, 0], [0, 1, 1, 1], [1, 0, 1, 1]], [[0, 0, 1, 0, 0], [0, 0, 0, 0, 1], [0, 1, 0, 0, 0], [0, 0, 0, 1, 0], [1, 0, 0, 0, 0], [1, 0, 1, 0, 0], [1, 1, 0, 0, 0], [0, 0, 1, 0, 1], [0, 1, 0, 0, 1], [1, 0, 0, 0, 1], [0, 0, 1, 1, 0], [0, 0, 0, 1, 1], [0, 1, 0, 1, 0], [0, 1, 1, 0, 0], [1, 0, 0, 1, 0], [0, 1, 0, 1, 1], [1, 1, 1, 0, 0], [0, 0, 1, 1, 1], [1, 0, 0, 1, 1], [1, 0, 1, 1, 0], [0, 1, 1, 0, 1], [1, 1, 0, 1, 0], [1, 0, 1, 0, 1], [1, 1, 0, 0, 1], [0, 1, 1, 1, 0]], [[0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0], [0, 1, 0, 0, 1, 0], [0, 0, 0, 1, 1, 0], [0, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 1], [1, 1, 0, 0, 0, 0], [1, 0, 0, 0, 1, 0], [1, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 1], [1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 1], [1, 0, 0, 0, 1, 1], [1, 0, 1, 0, 1, 0], [1, 0, 0, 1, 0, 1], [1, 0, 0, 1, 1, 0], [0, 1, 0, 0, 1, 1], [1, 0, 1, 0, 0, 1], [1, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 1], [0, 1, 1, 0, 1, 0], [0, 1, 0, 1, 1, 0], [0, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0], [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 0, 1], [0, 1, 1, 1, 0, 0]], [[0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 1], [0, 1, 0, 0, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1], [0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0], [0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1, 1], [1, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1], [0, 1, 1, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 1], [1, 1, 0, 0, 1, 0, 0], [1, 1, 0, 1, 0, 0, 0], [1, 0, 1, 1, 0, 0, 0], [1, 0, 0, 1, 0, 1, 0], [0, 1, 0, 0, 1, 1, 0], [0, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1], [0, 1, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 1], [1, 0, 1, 0, 1, 0, 0], [1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0], [0, 1, 1, 0, 1, 0, 0], [1, 1, 0, 0, 0, 0, 1], [1, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0], [1, 1, 1, 0, 0, 0, 0]], [[0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0], [0, 1, 0, 0, 0, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1], [1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 1, 1], [1, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1, 1], [1, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 1, 0, 0, 1], [0, 1, 1, 1, 0, 0, 0, 0], [1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 1, 0, 1], [1, 1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 1, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1], [0, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0], [0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 0, 1, 0, 1], [0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 1, 0, 0], [1, 0, 0, 1, 0, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 1, 0], [0, 1, 1, 0, 0, 0, 1, 0], [1, 0, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 1, 0, 0, 0, 1, 1, 0], [1, 1, 0, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1, 0, 1, 1], [1, 0, 1, 0, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 0, 0, 0, 1]], [[0, 0, 0, 0, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0], [1, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0, 1, 0, 0], [0, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 1, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0], [0, 1, 0, 0, 1, 0, 0, 1, 0], [1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0], [0, 1, 0, 0, 0, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0], [0, 1, 0, 0, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0, 1, 0, 0, 1], [1, 0, 0, 0, 1, 0, 1, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 1], [0, 1, 0, 0, 1, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 1, 0, 0, 1, 0], [1, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0], [0, 1, 0, 1, 1, 0, 0, 0, 0], [1, 0, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0], [1, 0, 0, 0, 0, 1, 0, 1, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0, 0, 0, 0, 0, 1], [1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0, 1, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 1, 0], [1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1], [0, 1, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 1, 0, 1]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 1, 1, 0, 0, 0, 0, 1, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0], [0, 1, 0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1], [1, 1, 0, 0, 0, 0, 0, 1, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 1, 0, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1], [1, 0, 0, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 0], [0, 1, 0, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0], [1, 1, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 1, 0, 0, 1, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 1, 0, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 1, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 1, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0]]]
int_seq_perms = [[], [[0]], [[0, 1], [1, 0]], [[0, 2, 1], [1, 2, 0], [2, 1, 0], [2, 0, 1], [0, 1, 2], [1, 0, 2]], [[3, 2, 1, 0], [1, 0, 3, 2], [1, 3, 2, 0], [3, 2, 0, 1], [2, 1, 0, 3], [2, 0, 3, 1], [1, 3, 0, 2], [0, 2, 3, 1], [2, 3, 1, 0], [1, 0, 2, 3], [1, 2, 3, 0], [2, 0, 1, 3], [0, 3, 2, 1], [3, 1, 2, 0], [0, 2, 1, 3], [3, 0, 2, 1], [2, 3, 0, 1], [0, 3, 1, 2], [0, 1, 2, 3], [0, 1, 3, 2], [3, 0, 1, 2], [2, 1, 3, 0], [3, 1, 0, 2], [1, 2, 0, 3]], [[3, 1, 2, 0, 4], [4, 1, 0, 2, 3], [2, 0, 4, 1, 3], [1, 2, 3, 4, 0], [1, 0, 3, 2, 4], [0, 4, 3, 2, 1], [2, 3, 4, 1, 0], [1, 3, 2, 4, 0], [2, 4, 0, 1, 3], [3, 4, 0, 1, 2], [3, 4, 0, 2, 1], [0, 1, 3, 2, 4], [1, 0, 2, 4, 3], [1, 0, 2, 3, 4], [0, 2, 4, 1, 3], [0, 3, 4, 2, 1], [0, 3, 1, 4, 2], [2, 0, 3, 4, 1], [4, 1, 2, 0, 3], [3, 1, 0, 4, 2], [0, 1, 4, 3, 2], [4, 3, 0, 2, 1], [0, 3, 1, 2, 4], [0, 4, 1, 3, 2], [4, 2, 0, 1, 3], [1, 3, 0, 4, 2], [3, 2, 1, 0, 4], [4, 3, 1, 2, 0], [2, 1, 3, 4, 0], [0, 2, 3, 4, 1], [3, 0, 2, 4, 1], [4, 3, 1, 0, 2], [1, 0, 4, 3, 2], [1, 2, 0, 3, 4], [1, 2, 0, 4, 3], [4, 3, 2, 0, 1], [2, 1, 0, 4, 3], [0, 4, 3, 1, 2], [1, 2, 4, 3, 0], [2, 0, 1, 3, 4], [1, 4, 2, 3, 0], [3, 1, 2, 4, 0], [4, 2, 1, 3, 0], [1, 0, 4, 2, 3], [2, 1, 0, 3, 4], [0, 3, 4, 1, 2], [1, 3, 2, 0, 4], [2, 3, 1, 4, 0], [3, 4, 1, 2, 0], [2, 1, 4, 3, 0], [3, 2, 0, 4, 1], [2, 1, 3, 0, 4], [0, 4, 1, 2, 3], [4, 0, 1, 3, 2], [0, 2, 1, 4, 3], [3, 4, 1, 0, 2], [3, 0, 4, 2, 1], [2, 4, 0, 3, 1], [3, 1, 0, 2, 4], [4, 0, 1, 2, 3], [0, 2, 1, 3, 4], [2, 0, 3, 1, 4], [3, 0, 4, 1, 2], [3, 1, 4, 2, 0], [1, 4, 0, 3, 2], [1, 4, 3, 2, 0], [4, 0, 2, 3, 1], [3, 2, 4, 1, 0], [3, 1, 4, 0, 2], [0, 2, 4, 3, 1], [2, 3, 1, 0, 4], [1, 4, 0, 2, 3], [1, 4, 3, 0, 2], [2, 0, 1, 4, 3], [2, 4, 1, 3, 0], [0, 4, 2, 1, 3], [4, 1, 3, 2, 0], [2, 0, 4, 3, 1], [1, 2, 3, 0, 4], [0, 3, 2, 4, 1], [4, 1, 3, 0, 2], [2, 3, 0, 4, 1], [1, 3, 4, 0, 2], [0, 2, 3, 1, 4], [3, 0, 2, 1, 4], [4, 0, 3, 2, 1], [0, 1, 2, 3, 4], [1, 2, 4, 0, 3], [1, 4, 2, 0, 3], [4, 1, 0, 3, 2], [4, 2, 1, 0, 3], [2, 4, 3, 1, 0], [0, 1, 3, 4, 2], [2, 3, 0, 1, 4], [0, 4, 2, 3, 1], [2, 4, 3, 0, 1], [4, 1, 2, 3, 0], [2, 1, 4, 0, 3], [1, 3, 0, 2, 4], [3, 2, 0, 1, 4], [4, 3, 2, 1, 0], [2, 3, 4, 0, 1], [1, 3, 4, 2, 0], [3, 0, 1, 4, 2], [3, 2, 4, 0, 1], [4, 0, 2, 1, 3], [3, 2, 1, 4, 0], [3, 0, 1, 2, 4], [4, 2, 0, 3, 1], [3, 4, 2, 1, 0], [4, 2, 3, 0, 1], [4, 2, 3, 1, 0], [0, 1, 2, 4, 3], [2, 4, 1, 0, 3], [3, 4, 2, 0, 1], [4, 0, 3, 1, 2], [0, 1, 4, 2, 3], [0, 3, 2, 1, 4], [4, 3, 0, 1, 2], [1, 0, 3, 4, 2]], [[3, 4, 1, 0, 2, 5], [5, 1, 3, 4, 2, 0], [3, 5, 2, 1, 4, 0], [4, 1, 2, 0, 3, 5], [1, 0, 5, 4, 3, 2], [2, 4, 0, 3, 1, 5], [2, 0, 4, 3, 5, 1], [4, 0, 3, 2, 5, 1], [2, 0, 5, 1, 3, 4], [1, 2, 5, 0, 3, 4], [0, 5, 4, 1, 2, 3], [3, 0, 5, 2, 1, 4], [3, 1, 0, 2, 4, 5], [3, 4, 5, 1, 2, 0], [0, 2, 3, 5, 1, 4], [3, 5, 4, 0, 1, 2], [1, 3, 2, 4, 0, 5], [0, 4, 1, 2, 3, 5], [3, 0, 1, 2, 4, 5], [0, 4, 5, 2, 3, 1], [4, 0, 3, 5, 2, 1], [2, 1, 0, 4, 3, 5], [2, 4, 0, 5, 1, 3], [3, 5, 0, 4, 2, 1], [4, 1, 2, 5, 3, 0], [4, 5, 1, 3, 0, 2], [0, 3, 1, 2, 4, 5], [0, 3, 5, 2, 4, 1], [2, 1, 0, 5, 4, 3], [0, 5, 2, 4, 3, 1], [3, 4, 0, 2, 1, 5], [4, 1, 3, 5, 2, 0], [4, 2, 5, 1, 3, 0], [5, 4, 2, 3, 0, 1], [1, 0, 2, 5, 3, 4], [1, 4, 2, 3, 0, 5], [4, 1, 5, 3, 0, 2], [2, 5, 3, 0, 4, 1], [0, 2, 5, 3, 4, 1], [1, 5, 4, 2, 0, 3], [3, 4, 5, 0, 2, 1], [4, 0, 1, 2, 3, 5], [3, 2, 0, 4, 1, 5], [5, 0, 4, 2, 1, 3], [4, 0, 5, 2, 3, 1], [4, 3, 2, 5, 1, 0], [5, 1, 3, 2, 4, 0], [2, 4, 3, 0, 5, 1], [2, 3, 4, 5, 0, 1], [4, 0, 5, 3, 2, 1], [5, 3, 4, 1, 2, 0], [0, 4, 3, 2, 1, 5], [4, 1, 3, 5, 0, 2], [5, 1, 4, 3, 2, 0], [2, 5, 1, 4, 3, 0], [3, 0, 2, 4, 1, 5], [5, 4, 3, 2, 1, 0], [3, 1, 0, 5, 4, 2], [1, 4, 0, 2, 3, 5], [0, 2, 4, 5, 3, 1], [2, 1, 0, 3, 4, 5], [1, 0, 4, 3, 2, 5], [1, 3, 2, 5, 4, 0], [5, 1, 2, 4, 3, 0], [5, 3, 4, 1, 0, 2], [0, 5, 4, 3, 1, 2], [4, 1, 5, 0, 2, 3], [4, 3, 1, 5, 0, 2], [2, 5, 0, 4, 1, 3], [5, 4, 2, 1, 3, 0], [1, 4, 0, 5, 3, 2], [1, 0, 4, 5, 2, 3], [1, 5, 4, 0, 3, 2], [0, 4, 2, 1, 3, 5], [4, 0, 5, 1, 2, 3], [1, 5, 2, 0, 4, 3], [5, 2, 3, 1, 4, 0], [1, 5, 4, 3, 0, 2], [1, 2, 0, 3, 5, 4], [2, 3, 4, 0, 1, 5], [0, 5, 3, 1, 4, 2], [5, 2, 4, 1, 3, 0], [5, 3, 1, 2, 4, 0], [1, 3, 5, 0, 2, 4], [3, 4, 2, 1, 5, 0], [3, 1, 0, 4, 5, 2], [3, 0, 5, 4, 2, 1], [1, 0, 4, 3, 5, 2], [4, 5, 3, 0, 2, 1], [4, 5, 2, 3, 0, 1], [0, 1, 2, 3, 5, 4], [0, 5, 1, 3, 4, 2], [0, 5, 2, 1, 4, 3], [0, 5, 1, 4, 2, 3], [5, 0, 4, 3, 2, 1], [4, 3, 5, 0, 1, 2], [4, 1, 3, 2, 0, 5], [2, 5, 4, 0, 1, 3], [3, 0, 2, 1, 4, 5], [5, 4, 1, 3, 2, 0], [5, 2, 4, 0, 3, 1], [1, 5, 0, 2, 4, 3], [4, 2, 0, 1, 5, 3], [0, 3, 2, 4, 1, 5], [0, 4, 2, 3, 5, 1], [1, 4, 3, 2, 5, 0], [3, 0, 4, 1, 2, 5], [2, 0, 1, 5, 4, 3], [3, 1, 5, 2, 4, 0], [3, 5, 1, 2, 4, 0], [5, 1, 4, 0, 3, 2], [2, 3, 0, 1, 4, 5], [1, 3, 5, 4, 2, 0], [0, 3, 4, 1, 5, 2], [2, 5, 3, 1, 0, 4], [4, 1, 0, 3, 2, 5], [2, 5, 0, 3, 4, 1], [5, 1, 2, 4, 0, 3], [1, 4, 3, 5, 2, 0], [5, 1, 4, 3, 0, 2], [5, 2, 3, 4, 1, 0], [5, 4, 0, 1, 3, 2], [4, 5, 2, 1, 3, 0], [4, 2, 3, 0, 1, 5], [5, 3, 1, 0, 2, 4], [3, 0, 2, 5, 4, 1], [3, 5, 4, 1, 0, 2], [1, 3, 2, 0, 4, 5], [1, 2, 3, 0, 4, 5], [0, 3, 5, 1, 4, 2], [2, 0, 5, 4, 1, 3], [5, 2, 0, 3, 1, 4], [5, 2, 1, 0, 3, 4], [2, 4, 1, 5, 3, 0], [3, 2, 4, 1, 5, 0], [2, 1, 3, 5, 0, 4], [1, 2, 3, 4, 5, 0], [3, 0, 1, 5, 2, 4], [1, 4, 3, 0, 5, 2], [0, 3, 1, 5, 2, 4], [0, 1, 4, 3, 2, 5], [1, 2, 3, 5, 4, 0], [0, 3, 2, 5, 4, 1], [3, 0, 4, 2, 5, 1], [4, 5, 1, 3, 2, 0], [4, 0, 5, 2, 1, 3], [1, 2, 4, 0, 3, 5], [1, 5, 0, 4, 3, 2], [3, 4, 0, 1, 2, 5], [0, 1, 3, 5, 2, 4], [3, 1, 4, 0, 2, 5], [1, 0, 5, 3, 2, 4], [2, 1, 5, 3, 4, 0], [4, 3, 5, 2, 1, 0], [0, 2, 1, 3, 5, 4], [3, 5, 0, 1, 4, 2], [3, 5, 1, 0, 2, 4], [0, 1, 5, 3, 4, 2], [4, 0, 2, 1, 5, 3], [1, 2, 4, 5, 3, 0], [2, 3, 0, 4, 1, 5], [5, 0, 1, 2, 4, 3], [5, 3, 0, 2, 1, 4], [0, 4, 5, 1, 2, 3], [0, 1, 5, 4, 3, 2], [1, 0, 3, 4, 2, 5], [2, 1, 5, 0, 4, 3], [5, 2, 0, 1, 4, 3], [1, 2, 4, 5, 0, 3], [2, 3, 1, 5, 4, 0], [5, 2, 4, 0, 1, 3], [2, 5, 1, 3, 4, 0], [5, 4, 3, 1, 2, 0], [1, 0, 3, 2, 5, 4], [1, 4, 5, 2, 3, 0], [4, 1, 2, 3, 5, 0], [1, 3, 2, 4, 5, 0], [2, 1, 5, 4, 0, 3], [0, 1, 4, 5, 3, 2], [1, 4, 0, 2, 5, 3], [2, 5, 1, 0, 4, 3], [2, 5, 3, 1, 4, 0], [5, 0, 3, 4, 1, 2], [1, 4, 3, 2, 0, 5], [2, 1, 0, 4, 5, 3], [4, 0, 5, 3, 1, 2], [4, 1, 2, 0, 5, 3], [2, 5, 0, 4, 3, 1], [2, 3, 4, 0, 5, 1], [0, 5, 3, 1, 2, 4], [0, 1, 4, 2, 3, 5], [4, 5, 0, 2, 1, 3], [5, 3, 1, 4, 0, 2], [5, 4, 3, 0, 2, 1], [0, 3, 4, 5, 1, 2], [1, 5, 3, 2, 0, 4], [5, 0, 4, 1, 3, 2], [0, 4, 1, 2, 5, 3], [0, 2, 1, 4, 5, 3], [2, 4, 0, 5, 3, 1], [1, 5, 0, 3, 2, 4], [2, 3, 5, 0, 1, 4], [5, 0, 2, 1, 4, 3], [0, 5, 1, 3, 2, 4], [1, 2, 5, 4, 0, 3], [4, 3, 0, 5, 1, 2], [0, 3, 4, 2, 1, 5], [0, 5, 2, 3, 1, 4], [5, 0, 2, 4, 1, 3], [1, 3, 5, 0, 4, 2], [0, 4, 2, 5, 1, 3], [4, 5, 1, 0, 3, 2], [4, 5, 0, 3, 1, 2], [0, 2, 4, 3, 5, 1], [3, 2, 4, 1, 0, 5], [4, 1, 5, 3, 2, 0], [1, 3, 5, 2, 0, 4], [0, 1, 5, 2, 4, 3], [1, 2, 3, 4, 0, 5], [4, 0, 1, 2, 5, 3], [5, 0, 3, 2, 1, 4], [3, 4, 2, 1, 0, 5], [5, 0, 4, 2, 3, 1], [4, 2, 1, 5, 3, 0], [3, 2, 0, 5, 4, 1], [4, 0, 1, 5, 2, 3], [3, 5, 1, 4, 0, 2], [4, 0, 2, 5, 1, 3], [4, 2, 0, 5, 1, 3], [5, 1, 2, 0, 4, 3], [4, 3, 1, 2, 5, 0], [4, 5, 1, 2, 3, 0], [2, 5, 3, 0, 1, 4], [0, 5, 1, 2, 3, 4], [4, 2, 3, 0, 5, 1], [5, 4, 0, 3, 2, 1], [5, 4, 3, 2, 0, 1], [1, 0, 2, 3, 5, 4], [2, 4, 5, 1, 0, 3], [4, 3, 1, 5, 2, 0], [4, 5, 3, 1, 0, 2], [0, 1, 2, 4, 3, 5], [3, 2, 4, 0, 5, 1], [4, 1, 3, 0, 5, 2], [0, 4, 2, 1, 5, 3], [3, 4, 2, 0, 1, 5], [3, 1, 2, 5, 0, 4], [3, 5, 2, 4, 1, 0], [4, 1, 2, 3, 0, 5], [1, 5, 4, 0, 2, 3], [2, 0, 1, 4, 3, 5], [5, 1, 0, 2, 4, 3], [4, 0, 2, 3, 1, 5], [2, 0, 5, 4, 3, 1], [1, 5, 2, 0, 3, 4], [5, 3, 2, 1, 4, 0], [4, 2, 0, 3, 1, 5], [4, 3, 1, 0, 5, 2], [0, 3, 2, 1, 5, 4], [3, 0, 1, 5, 4, 2], [1, 5, 2, 3, 0, 4], [5, 2, 3, 4, 0, 1], [5, 4, 0, 1, 2, 3], [3, 5, 0, 1, 2, 4], [2, 3, 1, 0, 5, 4], [3, 4, 5, 2, 0, 1], [1, 3, 0, 2, 5, 4], [2, 0, 3, 1, 4, 5], [3, 1, 5, 0, 2, 4], [4, 1, 0, 2, 3, 5], [4, 5, 3, 0, 1, 2], [2, 5, 4, 0, 3, 1], [2, 4, 5, 3, 1, 0], [0, 3, 5, 2, 1, 4], [2, 0, 3, 4, 1, 5], [2, 3, 5, 4, 1, 0], [4, 2, 5, 1, 0, 3], [2, 5, 4, 3, 0, 1], [2, 1, 3, 0, 5, 4], [4, 1, 0, 5, 3, 2], [3, 1, 5, 4, 0, 2], [1, 5, 0, 2, 3, 4], [0, 2, 5, 3, 1, 4], [0, 3, 5, 4, 1, 2], [4, 3, 0, 2, 1, 5], [2, 4, 1, 3, 5, 0], [1, 5, 4, 3, 2, 0], [3, 2, 5, 1, 4, 0], [5, 1, 4, 0, 2, 3], [2, 0, 1, 5, 3, 4], [3, 2, 5, 4, 1, 0], [2, 0, 1, 3, 4, 5], [2, 3, 0, 5, 4, 1], [4, 1, 3, 0, 2, 5], [1, 3, 4, 5, 0, 2], [2, 5, 1, 4, 0, 3], [5, 3, 1, 0, 4, 2], [0, 2, 1, 4, 3, 5], [4, 3, 1, 2, 0, 5], [3, 5, 4, 1, 2, 0], [2, 3, 0, 5, 1, 4], [0, 2, 1, 5, 4, 3], [0, 4, 1, 5, 2, 3], [1, 0, 5, 2, 4, 3], [4, 3, 2, 0, 1, 5], [1, 3, 4, 2, 5, 0], [2, 4, 3, 1, 5, 0], [1, 2, 4, 3, 5, 0], [5, 4, 2, 1, 0, 3], [0, 1, 3, 5, 4, 2], [4, 3, 0, 1, 5, 2], [5, 3, 1, 4, 2, 0], [1, 3, 0, 5, 4, 2], [1, 0, 3, 2, 4, 5], [0, 3, 1, 5, 4, 2], [4, 2, 3, 5, 0, 1], [0, 5, 4, 1, 3, 2], [0, 5, 3, 4, 1, 2], [1, 2, 4, 0, 5, 3], [4, 0, 3, 1, 5, 2], [0, 4, 5, 3, 1, 2], [4, 5, 3, 2, 1, 0], [1, 0, 5, 3, 4, 2], [3, 4, 0, 2, 5, 1], [5, 1, 4, 2, 3, 0], [5, 3, 4, 2, 0, 1], [3, 0, 5, 1, 2, 4], [1, 2, 0, 4, 3, 5], [3, 2, 0, 4, 5, 1], [3, 4, 0, 5, 2, 1], [5, 4, 3, 0, 1, 2], [5, 4, 2, 3, 1, 0], [0, 2, 1, 3, 4, 5], [3, 1, 0, 4, 2, 5], [5, 2, 4, 3, 0, 1], [5, 4, 1, 0, 2, 3], [0, 4, 1, 3, 5, 2], [3, 2, 1, 5, 0, 4], [3, 5, 1, 4, 2, 0], [3, 2, 0, 1, 5, 4], [5, 4, 2, 0, 1, 3], [3, 0, 1, 4, 5, 2], [4, 5, 0, 1, 2, 3], [2, 4, 0, 3, 5, 1], [4, 2, 0, 5, 3, 1], [2, 0, 3, 5, 4, 1], [0, 1, 4, 2, 5, 3], [4, 2, 5, 3, 1, 0], [0, 1, 4, 5, 2, 3], [0, 2, 3, 1, 4, 5], [4, 5, 3, 1, 2, 0], [0, 1, 2, 4, 5, 3], [0, 3, 4, 1, 2, 5], [2, 5, 1, 0, 3, 4], [0, 4, 3, 1, 5, 2], [0, 1, 2, 5, 3, 4], [2, 5, 0, 3, 1, 4], [4, 2, 5, 0, 1, 3], [0, 2, 4, 1, 3, 5], [0, 2, 3, 4, 1, 5], [5, 0, 2, 4, 3, 1], [5, 2, 4, 1, 0, 3], [5, 1, 2, 0, 3, 4], [5, 3, 2, 4, 1, 0], [3, 5, 1, 0, 4, 2], [2, 0, 5, 3, 4, 1], [1, 5, 0, 3, 4, 2], [1, 0, 4, 2, 3, 5], [4, 5, 2, 1, 0, 3], [2, 5, 0, 1, 4, 3], [5, 4, 0, 2, 1, 3], [3, 0, 2, 5, 1, 4], [0, 4, 3, 5, 1, 2], [0, 3, 2, 5, 1, 4], [4, 2, 1, 0, 5, 3], [5, 0, 2, 1, 3, 4], [5, 0, 3, 1, 4, 2], [5, 4, 1, 2, 0, 3], [0, 4, 3, 2, 5, 1], [0, 4, 2, 5, 3, 1], [3, 0, 4, 5, 2, 1], [1, 0, 2, 4, 3, 5], [1, 0, 4, 5, 3, 2], [1, 3, 4, 2, 0, 5], [2, 4, 1, 5, 0, 3], [2, 4, 3, 1, 0, 5], [1, 2, 4, 3, 0, 5], [1, 0, 2, 5, 4, 3], [1, 4, 3, 0, 2, 5], [4, 1, 5, 2, 3, 0], [3, 1, 5, 0, 4, 2], [4, 1, 0, 2, 5, 3], [5, 1, 0, 4, 3, 2], [4, 0, 2, 5, 3, 1], [4, 3, 5, 0, 2, 1], [3, 4, 2, 5, 0, 1], [5, 2, 0, 4, 1, 3], [3, 0, 2, 1, 5, 4], [0, 5, 3, 2, 4, 1], [3, 0, 2, 4, 5, 1], [4, 0, 3, 2, 1, 5], [4, 5, 0, 2, 3, 1], [2, 4, 1, 0, 3, 5], [4, 5, 2, 0, 1, 3], [0, 3, 2, 4, 5, 1], [3, 4, 5, 0, 1, 2], [0, 1, 3, 2, 4, 5], [5, 2, 1, 4, 0, 3], [2, 3, 5, 1, 0, 4], [4, 3, 2, 5, 0, 1], [2, 0, 4, 5, 1, 3], [5, 0, 1, 3, 2, 4], [5, 4, 1, 2, 3, 0], [5, 0, 2, 3, 4, 1], [5, 1, 2, 3, 0, 4], [1, 0, 2, 3, 4, 5], [2, 5, 4, 1, 3, 0], [2, 5, 3, 4, 1, 0], [4, 2, 1, 3, 5, 0], [1, 2, 0, 5, 4, 3], [1, 3, 0, 5, 2, 4], [1, 4, 5, 2, 0, 3], [1, 3, 4, 5, 2, 0], [3, 5, 0, 2, 4, 1], [5, 1, 3, 0, 2, 4], [2, 0, 1, 4, 5, 3], [4, 5, 1, 2, 0, 3], [3, 5, 2, 4, 0, 1], [2, 4, 3, 5, 1, 0], [2, 0, 5, 3, 1, 4], [0, 1, 3, 4, 5, 2], [5, 3, 2, 0, 4, 1], [1, 0, 3, 5, 2, 4], [1, 3, 0, 4, 5, 2], [1, 4, 5, 0, 3, 2], [2, 1, 3, 5, 4, 0], [3, 5, 0, 4, 1, 2], [1, 4, 0, 5, 2, 3], [1, 4, 5, 3, 0, 2], [5, 2, 1, 4, 3, 0], [0, 1, 5, 2, 3, 4], [3, 1, 2, 0, 5, 4], [4, 0, 3, 5, 1, 2], [1, 3, 4, 0, 5, 2], [2, 4, 5, 0, 3, 1], [1, 3, 2, 5, 0, 4], [4, 5, 2, 3, 1, 0], [0, 2, 1, 5, 3, 4], [1, 3, 0, 2, 4, 5], [3, 2, 1, 5, 4, 0], [3, 5, 4, 2, 0, 1], [2, 0, 4, 1, 5, 3], [1, 2, 0, 3, 4, 5], [3, 0, 5, 1, 4, 2], [4, 3, 1, 0, 2, 5], [3, 1, 5, 4, 2, 0], [2, 1, 4, 5, 0, 3], [2, 3, 0, 4, 5, 1], [3, 4, 1, 2, 5, 0], [3, 0, 5, 4, 1, 2], [2, 4, 5, 0, 1, 3], [0, 1, 2, 3, 4, 5], [4, 2, 1, 5, 0, 3], [3, 2, 0, 5, 1, 4], [0, 5, 4, 2, 1, 3], [5, 0, 4, 3, 1, 2], [3, 2, 5, 0, 4, 1], [1, 4, 0, 3, 2, 5], [5, 1, 3, 2, 0, 4], [2, 3, 0, 1, 5, 4], [1, 0, 5, 4, 2, 3], [0, 4, 5, 1, 3, 2], [2, 1, 4, 0, 3, 5], [4, 0, 1, 3, 5, 2], [1, 3, 2, 0, 5, 4], [4, 2, 1, 0, 3, 5], [3, 1, 4, 5, 0, 2], [5, 3, 0, 4, 2, 1], [4, 2, 5, 0, 3, 1], [3, 2, 1, 0, 5, 4], [5, 0, 3, 1, 2, 4], [2, 1, 0, 5, 3, 4], [0, 2, 4, 1, 5, 3], [1, 0, 5, 2, 3, 4], [2, 1, 4, 5, 3, 0], [3, 0, 5, 2, 4, 1], [4, 2, 1, 3, 0, 5], [4, 2, 5, 3, 0, 1], [1, 0, 4, 2, 5, 3], [5, 0, 3, 4, 2, 1], [1, 4, 0, 3, 5, 2], [4, 3, 2, 1, 5, 0], [1, 4, 2, 5, 0, 3], [1, 2, 5, 3, 0, 4], [5, 0, 1, 4, 3, 2], [5, 2, 3, 1, 0, 4], [1, 5, 3, 0, 2, 4], [3, 2, 4, 5, 1, 0], [1, 0, 2, 4, 5, 3], [2, 0, 4, 1, 3, 5], [2, 4, 0, 1, 3, 5], [4, 3, 5, 1, 0, 2], [4, 5, 3, 2, 0, 1], [1, 2, 0, 4, 5, 3], [2, 3, 4, 1, 5, 0], [5, 3, 2, 4, 0, 1], [1, 5, 4, 2, 3, 0], [5, 3, 0, 1, 4, 2], [2, 5, 0, 1, 3, 4], [3, 4, 0, 5, 1, 2], [0, 5, 2, 1, 3, 4], [1, 5, 0, 4, 2, 3], [5, 4, 2, 0, 3, 1], [4, 0, 1, 5, 3, 2], [1, 4, 2, 0, 3, 5], [5, 1, 4, 2, 0, 3], [4, 3, 5, 2, 0, 1], [1, 5, 2, 4, 3, 0], [3, 2, 0, 1, 4, 5], [2, 4, 1, 0, 5, 3], [1, 5, 3, 2, 4, 0], [5, 2, 3, 0, 4, 1], [1, 2, 3, 5, 0, 4], [5, 0, 1, 2, 3, 4], [1, 5, 3, 4, 2, 0], [5, 3, 4, 0, 2, 1], [0, 1, 5, 4, 2, 3], [1, 4, 2, 5, 3, 0], [5, 2, 3, 0, 1, 4], [3, 5, 2, 0, 4, 1], [0, 4, 2, 3, 1, 5], [0, 3, 1, 4, 5, 2], [0, 3, 4, 2, 5, 1], [3, 1, 5, 2, 0, 4], [3, 0, 1, 4, 2, 5], [3, 4, 2, 0, 5, 1], [0, 2, 3, 5, 4, 1], [0, 2, 5, 1, 4, 3], [1, 3, 5, 2, 4, 0], [2, 0, 3, 5, 1, 4], [5, 4, 0, 2, 3, 1], [0, 3, 4, 5, 2, 1], [0, 5, 1, 2, 4, 3], [4, 0, 2, 3, 5, 1], [0, 2, 5, 4, 1, 3], [0, 5, 4, 3, 2, 1], [4, 2, 0, 3, 5, 1], [1, 0, 3, 5, 4, 2], [5, 1, 0, 3, 2, 4], [3, 5, 2, 0, 1, 4], [1, 5, 2, 3, 4, 0], [1, 2, 5, 0, 4, 3], [4, 0, 3, 1, 2, 5], [4, 3, 0, 1, 2, 5], [3, 0, 4, 5, 1, 2], [5, 1, 3, 4, 0, 2], [4, 5, 0, 3, 2, 1], [1, 4, 5, 3, 2, 0], [3, 4, 5, 1, 0, 2], [3, 2, 1, 4, 5, 0], [0, 3, 1, 2, 5, 4], [1, 2, 5, 3, 4, 0], [2, 4, 3, 5, 0, 1], [3, 4, 1, 5, 0, 2], [3, 0, 4, 2, 1, 5], [2, 1, 5, 0, 3, 4], [2, 3, 1, 4, 5, 0], [1, 4, 5, 0, 2, 3], [4, 3, 2, 1, 0, 5], [5, 1, 0, 4, 2, 3], [5, 2, 0, 4, 3, 1], [4, 5, 2, 0, 3, 1], [2, 1, 5, 3, 0, 4], [4, 2, 3, 5, 1, 0], [2, 3, 4, 1, 0, 5], [1, 5, 2, 4, 0, 3], [3, 4, 1, 2, 0, 5], [2, 5, 4, 3, 1, 0], [3, 1, 2, 5, 4, 0], [4, 3, 0, 2, 5, 1], [2, 0, 4, 5, 3, 1], [5, 0, 1, 3, 4, 2], [0, 4, 1, 3, 2, 5], [2, 3, 4, 5, 1, 0], [2, 1, 3, 4, 5, 0], [4, 1, 0, 3, 5, 2], [2, 3, 1, 5, 0, 4], [0, 2, 4, 3, 1, 5], [0, 3, 1, 4, 2, 5], [0, 5, 3, 2, 1, 4], [2, 0, 5, 1, 4, 3], [2, 5, 1, 3, 0, 4], [0, 3, 5, 4, 2, 1], [3, 1, 0, 2, 5, 4], [3, 0, 4, 1, 5, 2], [3, 1, 4, 2, 5, 0], [5, 1, 3, 0, 4, 2], [2, 0, 1, 3, 5, 4], [1, 2, 0, 5, 3, 4], [3, 5, 4, 0, 2, 1], [5, 0, 4, 1, 2, 3], [4, 3, 2, 0, 5, 1], [3, 0, 1, 2, 5, 4], [3, 1, 0, 5, 2, 4], [0, 2, 4, 5, 1, 3], [3, 1, 4, 5, 2, 0], [5, 2, 0, 3, 4, 1], [0, 4, 3, 1, 2, 5], [5, 0, 2, 3, 1, 4], [2, 0, 3, 4, 5, 1], [2, 1, 5, 4, 3, 0], [4, 0, 5, 1, 3, 2], [5, 2, 1, 3, 0, 4], [0, 1, 4, 3, 5, 2], [5, 3, 0, 1, 2, 4], [0, 2, 3, 1, 5, 4], [3, 4, 5, 2, 1, 0], [3, 1, 2, 0, 4, 5], [2, 0, 3, 1, 5, 4], [0, 4, 5, 2, 1, 3], [5, 2, 0, 1, 3, 4], [3, 4, 0, 1, 5, 2], [2, 4, 0, 1, 5, 3], [0, 4, 5, 3, 2, 1], [3, 2, 4, 0, 1, 5], [3, 1, 2, 4, 5, 0], [3, 1, 4, 0, 5, 2], [4, 5, 1, 0, 2, 3], [2, 0, 4, 3, 1, 5], [0, 5, 2, 4, 1, 3], [4, 1, 5, 2, 0, 3], [0, 5, 1, 4, 3, 2], [0, 5, 4, 2, 3, 1], [1, 5, 3, 4, 0, 2], [0, 4, 3, 5, 2, 1], [2, 1, 0, 3, 5, 4], [1, 0, 3, 4, 5, 2], [3, 2, 1, 4, 0, 5], [2, 1, 4, 3, 5, 0], [2, 4, 1, 3, 0, 5], [5, 3, 2, 1, 0, 4], [3, 2, 4, 5, 0, 1], [4, 1, 5, 0, 3, 2], [2, 3, 1, 4, 0, 5], [2, 3, 5, 4, 0, 1], [2, 5, 3, 4, 0, 1], [2, 1, 4, 0, 5, 3], [5, 2, 4, 3, 1, 0], [4, 2, 0, 1, 3, 5], [4, 2, 3, 1, 5, 0], [4, 5, 0, 1, 3, 2], [0, 4, 1, 5, 3, 2], [0, 2, 3, 4, 5, 1], [2, 1, 3, 4, 0, 5], [1, 5, 3, 0, 4, 2], [2, 5, 4, 1, 0, 3], [3, 2, 5, 4, 0, 1], [3, 5, 2, 1, 0, 4], [1, 4, 3, 5, 0, 2], [0, 5, 3, 4, 2, 1], [3, 1, 4, 2, 0, 5], [5, 1, 0, 2, 3, 4], [1, 2, 3, 0, 5, 4], [3, 4, 1, 0, 5, 2], [0, 1, 2, 5, 4, 3], [0, 1, 3, 4, 2, 5], [3, 2, 5, 1, 0, 4], [5, 1, 0, 3, 4, 2], [5, 3, 0, 4, 1, 2], [5, 3, 2, 0, 1, 4], [1, 2, 5, 4, 3, 0], [1, 3, 0, 4, 2, 5], [0, 3, 2, 1, 4, 5], [0, 3, 5, 1, 2, 4], [2, 4, 5, 3, 0, 1], [5, 0, 1, 4, 2, 3], [0, 5, 2, 3, 4, 1], [5, 3, 4, 2, 1, 0], [2, 3, 1, 0, 4, 5], [1, 4, 2, 3, 5, 0], [0, 2, 5, 1, 3, 4], [5, 3, 0, 2, 4, 1], [1, 3, 4, 0, 2, 5], [5, 4, 1, 0, 3, 2], [5, 4, 0, 3, 1, 2], [3, 4, 1, 5, 2, 0], [4, 3, 0, 5, 2, 1], [1, 4, 2, 0, 5, 3], [2, 4, 3, 0, 1, 5], [5, 3, 1, 2, 0, 4], [5, 0, 3, 2, 4, 1], [5, 4, 1, 3, 0, 2], [3, 4, 2, 5, 1, 0], [2, 1, 3, 0, 4, 5], [4, 1, 0, 5, 2, 3], [3, 1, 2, 4, 0, 5], [2, 3, 5, 1, 4, 0], [4, 0, 2, 1, 3, 5], [0, 1, 5, 3, 2, 4], [4, 1, 3, 2, 5, 0], [0, 1, 3, 2, 5, 4], [3, 5, 0, 2, 1, 4], [3, 2, 5, 0, 1, 4], [5, 1, 2, 3, 4, 0], [5, 3, 4, 0, 1, 2], [3, 5, 4, 2, 1, 0], [2, 4, 5, 1, 3, 0], [5, 2, 1, 0, 4, 3], [2, 1, 4, 3, 0, 5], [4, 1, 2, 5, 0, 3], [1, 3, 5, 4, 0, 2], [4, 3, 5, 1, 2, 0], [3, 2, 1, 0, 4, 5], [5, 4, 3, 1, 0, 2], [5, 2, 1, 3, 4, 0], [2, 3, 5, 0, 4, 1], [0, 2, 5, 4, 3, 1], [4, 0, 1, 3, 2, 5], [3, 5, 1, 2, 0, 4], [4, 2, 3, 1, 0, 5]], [], [], [], []]
# end perms
grid_map = [[0]*16 for i in range(16)]
idx_map = [[-1]*16 for i in range(16)]
dis = [[999]*30 for i in range(30)]
dis_pre = []
dis_onmap = [[[[999]*16 for i in range(16)]for j in range(16)]for k in range(16)]


dx = [-1, 1, 0, 0]  # u, d, l, r
dy = [0, 0, -1, 1]
# end pre

# Separately use! player 0&1
players_score = [[0, 0] for i in range(2)] # tot_reward, this_reward
players_state = [[1, 0, 0]for i in range(2)] # [need_choose, goto_pick, goto_deliver]
players_ords_dict = [{}, {}]
players_pre_catched_ords = [[], []]
players_confirmed_ords = [[], []]
players_walk_path = [[], []] #list of [ord_id, to_pos, typ]
# end use
   
def inmap(x, y):
    return 0 <= x and x <= 15 and 0 <= y and y <= 15
def calc_dis(): # 1-10 restaurants ; 11-30 customers
    
    u_lis = []
    idx = 0
    
    for loc in res_loc:     
        u_lis.append(loc)
        idx_map[loc[0]][loc[1]] = idx
        idx += 1
        
    for loc in cus_loc:
        u_lis.append(loc)
        idx_map[loc[0]][loc[1]] = idx
        idx += 1
        
    for sx in range(16):
        for sy in range(16):
            dis_pre = [[999]*16 for i in range(16)]
            dis_pre[sx][sy] = 0
            
            que = [[sx, sy]]
            l, r = 0, 0
            s_idx = idx_map[sx][sy]
            
            while l <= r:
                p = que[l]
                now_dis = dis_pre[p[0]][p[1]]
                dis_onmap[sx][sy][p[0]][p[1]] = now_dis
                
                t_idx = idx_map[p[0]][p[1]]
                if t_idx > 0:
                    dis[s_idx][t_idx] = now_dis
                
                l += 1
                for mov in range(4):
                    nx, ny = p[0]+dx[mov], p[1]+dy[mov]
                    
                    if not inmap(nx, ny): continue
                    if grid_map[nx][ny] == 0 or dis_pre[nx][ny] < 999:
                        continue
                    
                    dis_pre[nx][ny] = now_dis + 1
                    que.append([nx, ny])
                    r += 1
        
    
    
def load_roads(obs):
    for road in obs['roads']:
        roads.append(road)
    for res in obs['restaurants']:
        res_loc.append(res['position'])
        roads.append(res['position'])
    for cus in obs['customers']:
        cus_loc.append(cus['position'])
        roads.append(cus['position'])
    for road in roads:
        grid_map[road[0]][road[1]] = 1
def load_perms():
    if len(ones_zeros_perms) > 0:
        return
    with open('agents/random/ones_zeros_perms.json', 'r') as f1:
        lis = json.load(f1)
        add_lis(lis, ones_zeros_perms)
        
    with open('agents/random/int_seq_perms.json', 'r') as f2:
        lis = json.load(f2)
        add_lis(lis, int_seq_perms)
# pre_process

def reward_ord(res_pos, cus_pos):
    return abs(cus_pos[0] - res_pos[0]) + abs(cus_pos[1] - res_pos[1])  
def time_spent(res_pos, cus_pos, pos):
    dis_to_res = dis_onmap[pos[0]][pos[1]][res_pos[0]][res_pos[1]]
    dis_to_cus = dis_onmap[res_pos[0]][res_pos[1]][cus_pos[0]][cus_pos[1]]
    dis_tot = dis_to_res + dis_to_cus  
    return dis_tot   
      
def calc_value(s_ord, pos, cur):
    
    ddl_time = s_ord['end_time'] - cur
    res_id = s_ord['restaurant_id']
    cus_id = s_ord['customer_id']
    res_pos = res_loc[res_id]
    cus_pos = cus_loc[cus_id]   
    
    time_need = time_spent(res_pos, cus_pos, pos)
    ok_sent = (time_need + 2) <= ddl_time   # +2 is Edge buffering // Rider can have a rest......
    reward = reward_ord(res_pos, cus_pos)
    
    return [ok_sent * reward / time_need, reward] # [value, reward]
def choose_an_ord(new_ords, pos, cur): # pos = player's position
    if len(new_ords) == 0: return -1 
    
    # value(ord) = can_be_sent(ord) * reward(ord) / time_need(ord)
    val_lis = []
    for i in range(len(new_ords)):
        val_lis.append([i, calc_value(new_ords[i], pos, cur)])
    val_lis.sort(key=lambda x:x[1][0], reverse=True)
    return [val_lis[0][0], val_lis[0][1]] # [idx, [value, reward]]
# Process Orders

def dis_on_pos(pos_a, pos_b):
    return dis_onmap[pos_a[0]][pos_a[1]][pos_b[0]][pos_b[1]]
def is_valid_perm(perm):
    n = len(perm) // 2
    vis = [0] * (2 * n)
    for idx in perm:
        vis[idx] = 1
        if idx % 2 == 1 and vis[idx - 1] == 0:
            return 0
    return 1
def ords_analysis(ords, rank, pos, cur, pick_ddl=[]):
    n = len(ords)
    now_pos = pos
    locs = [[0]*2 for i in range(n)]
    reward = 0
    cur_copy = cur
    
    for cor in rank:
        ord_idx = cor[0]
        if cor[1] == 1:
            to_id = ords[ord_idx]['customer_id']
            to_pos = cus_loc[to_id]
        elif cor[1] == 0:
            to_id = ords[ord_idx]['restaurant_id']
            to_pos = res_loc[to_id]
            
        locs[ord_idx][cor[1]] = to_pos
        
        dist = dis_on_pos(now_pos, to_pos)
        cur += dist
        
        if cor[1] == 1: 
            reward += reward_ord(locs[ord_idx][0], locs[ord_idx][1])
        
        now_pos = to_pos
        if cor[1] == 0 and len(pick_ddl) > 0:
            if cur > pick_ddl[ord_idx]: return 0
        ed_time = min(500, ords[ord_idx]['end_time'])
        if cor[1] == 1 and cur > ed_time:
            return 0
        
    return reward / (cur - cur_copy) # value(efficiency)
        
def calc_multi_value(ords, pos, cur, ddl_time=[]):   # sort and calc
    n = len(ords)
    base_rank = [[i,j]for i in range(n)for j in range(2)]  # (i, j) j=0:restaurant, j=1:customer
    perms = int_seq_perms[2 * n]
    
    max_value = 0
    best_rank = []
    
    for perm in perms:
        if is_valid_perm(perm) == 0: continue
        
        rank = []
        for idx in perm:
            rank.append(base_rank[idx])
        ord_value = ords_analysis(ords, rank, pos, cur, ddl_time)
        
        if ord_value > max_value:
            max_value = ord_value
            best_rank = []
            add_lis(rank, best_rank)
        
    return [best_rank, max_value]
def pro_choose(new_ords, pos, now_state, max_pick=3):  # version 2.0: now_state = [cur]
    # now_state: list of [pos, ddl_time]
    len_ords = len(new_ords)
    if len_ords == 0: return -1
    max_pick = min(max_pick, len_ords)
    cur = now_state[0]
    
    permutations = ones_zeros_perms[len_ords]
    
    ords_with_value = []
    for perm in permutations:
        ords = []
        for i in range(len(perm)):
            if perm[i]:
                ords.append(new_ords[i])
        ords_value = [perm, calc_multi_value(ords, pos, cur)]    # [perm, [[proper_rank...(0,0),(1,0),(1,1),(0,1)], value]]
        ords_with_value.append(ords_value)
    
    ords_with_value.sort(key=lambda x: x[1][1], reverse=True)
    
    if ords_with_value[0][1][1] == 0: return -1
    return ords_with_value[0]
    # return list of [perm, [rank ,value]] / -1
    
# Advanced Order processing


def ordid_to_idx(ord_id, ords):
    for i in range(len(ords)):
        if ords[i]['order_id'] == ord_id:
            return i
    return -1
def find_dir(u_pos, v_pos):
    sx, sy = u_pos[0], u_pos[1]
    tx, ty = v_pos[0], v_pos[1]
    
    dirs = [[999]*16 for i in range(16)]
    dirs[sx][sy] = -1
    
    que = [[sx, sy]]
    l, r = 0, 0
    
    while l <= r:
        p = que[l]
        now_dir = dirs[p[0]][p[1]]
        l += 1
        for mov in range(4):
            nx, ny = p[0]+dx[mov], p[1]+dy[mov]
            
            if not inmap(nx, ny): continue
            if grid_map[nx][ny] == 0 or dirs[nx][ny] < 999:
                continue
            
            marker = now_dir
            if marker == -1: marker = mov
            
            dirs[nx][ny] = marker
            que.append([nx, ny])
            r += 1
        if p == [tx, ty]: break
    
    return dirs[tx][ty]
def my_controller(observation, action_space, is_act_continuous=False):
    
    
    if len(roads) == 0:
        load_roads(observation['obs'])     # walkable grid
        load_perms()
        calc_dis()
        
# get the obs_info    
    play_id = observation['controlled_player_index']
    cur_step = observation['obs']['current_step']
    
    self_info = observation['obs']['agents'][play_id]
    pos = self_info['position']
    ord_to_d = self_info['order_to_deliver']
    ord_to_p = self_info['orders_to_pick']
    
    new_ords = observation['obs']['new_orders']
    
    state = players_state[play_id]
    ords_dict = players_ords_dict[play_id]
    pre_catched_ords = players_pre_catched_ords[play_id]
    confirmed_ords = players_confirmed_ords[play_id]
    walk_path = players_walk_path[play_id]
    
# end get
    for s_ord in new_ords:
        players_ords_dict[0][s_ord['order_id']] = s_ord
        players_ords_dict[1][s_ord['order_id']] = s_ord
        
    agent_action = [[0]*5, [0]*20, [0]*5, [0]*10]
    moved_flag = 0
    # state 3->2->1
    
    if state[0] >= 3:   # on_the_road / wait_til_drop
        
        if state[0] == 4 and len(walk_path) == 0:
            if len(ord_to_p) == 0:
                state[0] = 1
            else:
                state[0] = 4
        else:
            to_pos = walk_path[0][1]
            direction = find_dir(pos, to_pos)
            dist = dis_on_pos(pos, to_pos)
            if dist == 1:
                typ = walk_path[0][2]
                
                max_idx = 0
                for i in range(len(walk_path)):
                    if walk_path[i][1] == walk_path[0][1]: max_idx = i
                    else: break
                    
                if  typ == 0:
                    for i in range(max_idx + 1):
                        pick_idx = ordid_to_idx(walk_path[i][0], ord_to_p)
                        agent_action[1][pick_idx] = 1
                elif typ == 1:
                    for i in range(max_idx + 1):
                        drop_idx = ordid_to_idx(walk_path[i][0], ord_to_d)
                        agent_action[2][drop_idx] = 1
                        
                for i in range(max_idx + 1):
                    del walk_path[0]       
                
            agent_action[0][direction] = 1
            moved_flag = 1
            if state[0] == 3 and len(walk_path) == 0:
                state[0] = 1
        
    elif state[0] == 2:   # need_to_confirm
        
        if len(ord_to_p) == 0:
            # fail catch
            state[0] = 1
        else:
            
            clr_lis(confirmed_ords)
            ddl_time = []
            for s_ord in ord_to_p:
                confirmed_ords.append(ords_dict[s_ord['order_id']])
                ddl_time.append(s_ord['end_time'])
            
            result = calc_multi_value(confirmed_ords, pos, cur_step, ddl_time)
            if result[1] == 0:
                # cannot_be_sent
                clr_lis(walk_path)
                this_ord = confirmed_ords[0]
                ord_id = this_ord['order_id']
                res_id = this_ord['restaurant_id']
                res_pos = res_loc[res_id]
                cus_id = this_ord['customer_id']
                cus_pos = cus_loc[cus_id]
                
                walk_path.append([ord_id, res_pos, 0])
                walk_path.append([ord_id, cus_pos, 1])
                state[0] = 4                 
            else:
                clr_lis(walk_path)
                ranks = result[0]
                for rank in ranks:
                    this_ord = confirmed_ords[rank[0]]
                    ord_id = this_ord['order_id']
                    res_id = this_ord['restaurant_id']
                    res_pos = res_loc[res_id]
                    cus_id = this_ord['customer_id']
                    cus_pos = cus_loc[cus_id]
                    
                    if rank[1] == 0:
                        to_pos = res_pos
                    else:
                        to_pos = cus_pos
                        
                    walk_path.append([ord_id, to_pos, rank[1]])
                state[0] = 3
                
            # walk 1 step
            to_pos = walk_path[0][1]
            dist = dis_on_pos(pos, to_pos)
            if dist <= 1:
                if dist == 0: agent_action[0][-1] = 1
                if dist == 1: agent_action[0][find_dir(pos, to_pos)] = 1
                moved_flag = 1
                
                max_idx = 0
                for i in range(len(walk_path)):
                    if walk_path[i][1] == walk_path[0][1]: max_idx = i
                    else: break
            
                for i in range(max_idx + 1):
                    pick_idx = ordid_to_idx(walk_path[i][0], ord_to_p)
                    agent_action[1][pick_idx] = 1
                
                for i in range(max_idx + 1):
                    del walk_path[0]
                 
    elif state[0] == 1:   # need_to_choose
        
        choosed_ords = pro_choose(new_ords, pos, [cur_step], 3) 
        #return list of [perm, [rank ,value]] / -1
        if choosed_ords == -1:
            agent_action[0][find_dir(pos, res_loc[0])] = 1
        else:
            ranks = choosed_ords[1][0]
            perm = choosed_ords[0]
            unranked_ords = []
            for i in range(len(perm)):
                agent_action[3][i] = perm[i]
                
                this_ord = new_ords[i]
                ord_id = this_ord['order_id']
                res_id = this_ord['restaurant_id']
                res_pos = res_loc[res_id]
                cus_id = this_ord['customer_id']
                cus_pos = cus_loc[cus_id]
                
                unranked_ords.append([ord_id, res_pos, 0])
                unranked_ords.append([ord_id, cus_pos, 1])
                ords_dict[ord_id] = this_ord
            
            pre_catched_ords = []
            for rank in ranks:
                idx = 2 * rank[0] + rank[1]
                pre_catched_ords.append(unranked_ords[idx])
                
            state[0] = 2
            
            # now walk 1 step to 1st pos.
            if moved_flag == 0:
                agent_action[0][find_dir(pos, pre_catched_ords[0][1])] = 1
                moved_flag = 1    
    return agent_action
    